set field read only 

    if (oldValue != '' && newValue == '') {
        g_form.setReadOnly('state', false);
    }


------------------------------------------------------------------

check if tasks from story are completed 

(function executeRule(current, previous /*null when async*/ ) {
    var srtask = new GlideRecord('rm_scrum_task');
    srtask.addQuery('parent', current.sys_id);
	// check if documentation task has state other than "Complete"
	srtask.addQuery('state', '!=', 3).addOrCondition('state', '!=', 4);
	//srtask.addQuery('type', 3);
    srtask.query();
    if (srtask.hasNext()) {
        gs.addErrorMessage("!!! Cannot complete story due to documentation scrum task invalid state !!!");
		current.state = previous.state;
		current.update();
        //current.setAbortAction(true);
    }
})(current, previous);



var rec = new GlideRecord('sc_task');
rec.addQuery('request_item', current.sys_id);
rec.addQuery('active', true);
rec.query();
if(rec.hasNext()){
answer = false;
}


----------------------------------------------------------------------------


//getting recor Short |Descritpion and Record Number
		var shortDesc ='';
		var recNumber = '';
		var workNotes = '';
		var recTable = new GlideRecord(result.className);
		recTable.addQuery('sys_id', result.recordSysId);
		recTable.query();
		while(recTable.next()){
			shortDesc = recTable.short_description;
			recNumber = recTable.number;
		}
//getting record Wornotes and Comments
		
		var commentsAndWorkNotes = new GlideRecord('sys_journal_field');
		commentsAndWorkNotes.addQuery('element_id',result.recordSysId );
		commentsAndWorkNotes.orderByDesc('sys_created_on');
		commentsAndWorkNotes.setLimit(1);
		commentsAndWorkNotes.query();
		while(commentsAndWorkNotes.next()){
			workNotes = commentsAndWorkNotes.value;



ACL - exclude user from write rights

if (gs.getUserName() != "xxxxxxx") {
 answer = true;
}
else{
 answer = false;
}

-------------------------------------------------------------------------------------------

background script for duplicate values in list

var gr = new GlideAggregate('alm_hardware');
gr.addAggregate('COUNT','serial_number');
gr.groupBy('serial_number');
gr.addHaving('COUNT','>',1);
gr.query();
var duplicates = [];
while(gr.next()){
	duplicates.push(gr.getValue('serial_number'));
}
gs.info(duplicates.toString());
